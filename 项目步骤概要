1. 用脚手架创建项目：vue create 项目名

2 删掉一些预设的垃圾

3. 划分目录结构
	3.1 assets
		3.1.1 css
			3.1.1.1 normalize.css
			3.1.1.2 base.css
		3.1.2 img
	3.2 components
		3.2.1 common
		3.2.2 content
		3.3 network
		3.4 common

4. css
	1. base.css中导入normalize.css
	2. APP.vue中style中@import base.css

5. 配置别名：和package.json同级放vue.config.js
	注意：在使用别名的时候，<template>和<style>中的静态文件地址需要加~；在script里的, 别名定义成什么就写什么

6. 统一全局格式：和package.json同级放.editorconfig

7. px2vw-css单位转化插件，应用vw移动端适配方案（取代rem）
	1. 安装：cnpm i postcss-to-viewport -D
	2. 最外层目录添加：postcss.config.js
  
8. 解决移动端300ms延时
	1. 安装fastclick
	2. main.js导入FastClick，并attach到body

9. vue-lazyload框架，实现图片懒加载
	1. 安装：cnpm i vue-lazyload -S
	2. main.js导入VueLazyload，并使用该插件
	3. 需要使用懒加载处的<img>，:src=改为v-lazy=  

10. 配置路由

11. 封装网络请求
	1. 安装axios
	2. network文件夹下放request.js

12. 封装防抖动函数：common下放utils.js

13. 将better-scroll插件封装成Scroll组件
	1. 安装：cnpm i better-scroll -S
	2. components/common下建scroll文件夹，里面建Scroll.vue
	3. Scroll.vue的template中放一个class为wrapper的div，wrapper里再放一个div，div里放一个slot
	4. Scroll.vue中导入BScroll（不需要注册组件）
	5. 创建变量储存BScroll实例：Scroll.vue中添加data，里面添加scroll: null
	6. 创建BScroll实例：Scroll.vue中添加mounted()，new一个BScroll赋给scroll，设置click为true
	7. 由调用者决定是否需要是否需要监听上拉加载
		1. 让外界传递参数决定是否监听：Scroll.vue中的props添加pullUpLoad
		2. 初始化组件时应用监听类型：mounted的new BScroll中添加pullUpLoad: this.pullUpLoad
		3. 监听拉到底部：Scroll.vue中的mounted给scroll绑定一个pullingUp，并发射出去

14. 封装BackTop组件
	1. components/content下建backTop文件夹，里面建BackTop.vue
	2. 插入图片，并调整样式

15. 封装navBar：components/common下放navBar组件

16. 导入底部tabBar
	1. components/common下放tabBar组件
	2. components/content下放mainTabBar组件
	3. App.vue导入mainTabBar

17. 封装tabControl：components/content下放tabControl组件

18. 封装CheckButton：components/content下放CheckButton组件

19. 首页
	1. Home.vue导入navBar，使用其center插槽做一个顶部导航栏
	2. 使用better-scroll
		1. 导入Scroll，并给<scroll>添加class="content"
		2. 将需要滚动的内容包裹在<scroll>标签中
		3. 调整content的css样式以给content一个高度
	3. 请求轮播图和推荐信息的数据
		1. 创建首页的网络请求：network文件夹下放home.js，并在Home.vue中导入
		2. Home.vue中data属性内添加：banners、recommends属性用以储存请求过来的数据
		3. Home.vue中的methods添加getHomeMultidata方法
		4. Home.vue中的created中添加相关方法，初始化时调用网络请求，拿到轮播图和推荐信息的数据
	4. 轮播图
		1. components/common下放swiper组件
		2. views/home下新建childComps文件夹，放HomeSwiper.vue，并在Home中导入它
	5. 推荐信息：views/home/childComps下放RecommendView.vue，并在Home中导入它
	6. 本周流行：views/home/childComps下放FeatureView.vue，并在Home中导入它
	7. 商品展示
		1. network下home.js添加getHomeGoods方法
		2. Home.vue中的methods添加getHomeGoods方法
		3. Home.vue中的data添加goods和currentType属性，用来存储拿到的商品数据和记录当前显示的商品类型
		4. Home.vue中的created添加3个调用getHomeGoods，拿到3类商品的数据
		5. components/content下放goodsList组件
		6. Home.vue中导入GoodsList
		7. Home.vue中的computed添加showGoods调取data中拿到的数据
		8. <GoodsList>中通过绑定showGoods将数据传给GoodsList做展示
	8. tabcontrol
		1. Home.vue中导入TabControl组件
		2. 传titles给TabControl组件
		3. 点击tabControl切换到对应类型的商品
			1. 点击TabControl时拿到点击的是几个：TabControl.vue中的tabClick添加this.$emit("tabClick", index);
			2. Home.vue中的<TabControl>拿到tabClick，并将其绑定给tabClick方法
			3. Home.vue的methods中添加tabClick方法，将currentType设置为当前所点击的类型
		4.吸顶效果
			1. Home.vue中的data添加tabOffsetTop记录tabControl距离顶部的距离
			2. Home.vue中的<TabControl>添加ref="tabControlIn"
			3. HomeSwiper.vue的<img>添加@load，拿到轮播图图片加载完成的时机
			4. HomeSwiper.vue的methods添加imageLoad方法告知外部图片已加载，并利用isLoad只向外发送一次
			5. Home.vue中的<HomeSwiper>拿到swiperImageLoad，并绑定offsetWithImg方法
			6. Home.vue中的methods添加offsetWithImg方法，在所有图片都加载完后获取到tabControl距离顶部的距离
			7. Home.vue中的data添加isTabFixed，控制tabControl是否吸顶
			8. Home.vue中的contentScroll方法中，通过将当前位置与tabOffsetTop进行比较，决定是否吸顶
			9. Home.vue中<Scroll>外再放一个<TabControl>，设置样式给z-index，并将isTabFixed绑定给v-show
			10. Home.vue中分别给里外两个<TabControl>设置不同的ref
			11. Home.vue中的tabClick方法内通过刚才的2个ref拿到2个<TabControl>，将index均赋值给2个<TabControl>的currentIndex
	9. 使用BackTop组件
		1. Home.vue中导入BackTop组件，mixin中注册组件
		2. <BackTop>添加点击事件，并绑定backClick方法
		3. 给<Scroll>添加ref="scroll"，方便backClick方法拿到Scroll组件
		4. mixin的methods添加backClick方法，设置“回到顶部”按钮所返回的位置以及动画时间
		5. 显示和消失效果
			1. 由调用者决定监听方式类型：Scroll.vue中添加props，里面添加probeType
			2. Scroll.vue中的new BScroll里面添加probeType: this.probeType
			3. Home.vue的<Scroll>绑定监听方式类型：:probeType="3"
			4. Scroll.vue中的mounted添加scroll.on，获取到当前滚动的位置，并向外暴露scroll事件和position
			5. Home.vue的<Scroll>通过@拿到scroll事件和position，并给其绑定contentScroll方法
			6. Home.vue的<backTop>添加：v-show="ifShowBackTop"
			7. mixin的data里添加ifShowBackTop: false
			6. Home.vue的methods添加contentScroll方法，利用拿到的position并通过操作ifShowBackTop控制是否显示“回到顶部”
			7. mixin的methods添加backClick方法，设置返回位置和动画时间，<BackTop>将它绑定为点击事件
	10. 上拉加载更多
		1. 首页告知Scroll需要监听上拉加载：Home.vue的<scroll>绑定:pullUpLoad="true"
		2. 当拉到底部继续上拉，Scroll会向外发射pullingUp，Home.vue的<scroll>拿到pullingUp，并为其绑定loadMore方法
		3. Home.vue的methods中添加loadMore方法，通过调用getHomeGoods加载更多商品数据
		4. BScroll默认只能上拉加载一次，因此每次加载完要告知已加载
			1. Home.vue的getHomeGoods中添加this.$refs.scroll.finishPullUp();
			2. Scroll.vue的methods中添加finishPullUp方法
	11. 解决BScroll有时无法拉动的BUG
		BUG原因：
			1. BScroll内部有一个参数决定可滚动区域的高度，这个参数的值在BScroll被创建时就定下来了
			2. 但当有时图片加载太慢，就会出现图片还未加载完这个参数的值就先定下来了
			3. 这样一来就没把那些图片的高度算进去，造成可滚动区域高度小于实际的内容高度
			4. 解决的思路就是在1个page（本项目商品的数据刷新一次拿到1个page，30张图）中30张图片加载完后执行一次刷新页面
		代码添加步骤：
			1. GoodsListItem.vue的<img>添加：@load="imageLoad"，在图片加载完的时机调用imageLoad方法
			2. GoodsListItem.vue的methods添加imageLoad方法，对外发射告知已加载完图片
			3. 由于imageLoad的数据传递用到数据总线，因此main.js中new另外一个Vue实例作为事件总线
			4. 图片加载完后执行刷新，并防抖，并封装到mixin中
				1. mixin中导入debounce
				2. mixin的mounted中，将调用刷新放进防抖函数中生成一个带防抖的新函数，并赋值给自定义变量refresh
				3. mixin的mounted添加$bus.$on，每当有图片加载完成便执行refresh()
			5. Scroll.vue中的methods添加refresh方法
	12. 保留离开首页时的位置
		1. 记录下离开时的位置
			1. Home.vue中的data添加leaveY
			2. Home.vue中添加deactivated，离开时记录位置
		2. 用户再次回到首页时跳转到上次位置
			1. Home.vue中添加activated，再次访问首页时跳转到leaveY处
			2. 刷新页面防止出现无法拖动等bug

20. 商品详情页
	1. views中添加detail组件，并配置路由
	2. GoodsListItem.vue的div绑定点击事件：@click="itemClick"
	3. GoodsListItem.vue的methods中添加itemClick方法，实现跳转到详情页
	4. Detail.vue中data添加iid，created中通过动态路由拿到iid并保存
	5.顶部导航栏 
		1. childComps内放DetailNavBar.vue，导入NavBar，Detail.vue中导入DetailNavBar
		2. DetailNavBar.vue的data添加titles，<NavBar>使用center插槽把它们v-for遍历展示
		3. 点击按钮时变色
			1. DetailNavBar.vue的data添加currentIndex，center插槽下div动态绑定样式active
			2. center插槽下div绑定点击事件changeCurIdx，methods中添加changeCurIdx方法
		4. DetailNavBar.vue的<NavBar>使用left插槽插入图片做返回按钮，并绑定点击事件backClick
		5. DetailNavBar.vue的methods添加backClick方法，利用$router.back()实现返回
	6. 请求数据
		1. network下建detail.js，添加getDetail方法
		2. Detail.vue导入getDetail方法，created添加getDetail方法，拿到商品数据
	7. 轮播图
		1. Detail.vue的data中添加topImages，getDetail方法中将数据给topImages
		2. childComps建DetailSwiper.vue，导入 { Swiper, SwiperItem }
		3. Detail.vue导入DetailSwiper并传递topImages
		4. DetailSwiper.vue的props中添加topImages，接收传过来的数据
		5. <SwiperItem>中v-for遍历展示图片，并调整样式将图片缩小
		6. App.vue的排除Detail的keep-alive，使得每次点击不同的商品能进入不同的详情页
	8. 商品基本信息
		1. detail.js中添加导出Goods类，将所有需要的商品数据整合在一起
		2. Detail.vue中导入Goods类，并在data中添加goods储存请求到的数据
		3. Detail.vue的getDetail中new一个Goods对象，并将拿到的数据存到goods中
		4. childComps下建DetailBaseInfo.vue，Detail.vue中导入它并传递goods
	9. 店铺信息
		1. detail.js中添加导出Shop类
		2. Detail.vue中导入Shop类，并在data中添加shop储存请求到的数据
		3. Detail.vue的getDetail中new一个Shop对象，并将拿到的数据存到shop中
		4. childComps下建DetailShopInfo.vue，Detail.vue中导入它并传递shop
	10. 加入BScroll
		1. Detail.vue中导入Scroll，调整content样式给定滚动内容高度
		2. 给detail-nav一个z-index使其不被滚动内容挡住
	11. 商品评论信息
		1. Detail.vue的data中添加commentInfo储存请求到的数据
		2. Detail.vue的getDetail中拿到评论数据，并存到commentInfo中
		3. childComps下建DetailCommentInfo.vue，Detail.vue中导入它并传递commentInfo
		4. utils.js中封装formatDate函数，DetailCommentInfo.vue中导入它
		5. Detail.vue的class为date的span中添加showDate
		6. Detail.vue添加filters，拿到事件数据后进行格式转换
	12. 商品参数信息
		1. detail.js导出GoodsParam类
		2. Detail.vue中导入GoodsParam类，并在data中添加paramInfo储存请求到的数据
		3. Detail.vue的getDetail中new一个GoodsParam对象，并将拿到的数据存到paramInfo中
		4. childComps下建DetailParamInfo.vue，Detail.vue中导入它并传递paramInfo
	13. 商品详情信息
		1. Detail.vue的data添加detailInfo，并在getDetail中将拿到的数据给它
		2. childComps下建DetailGoodsInfo.vue，Detail.vue中导入它并传递detailInfo
		3. 解决BScroll无法滚动BUG
			1. DetailGoodsInfo.vue中img绑定图片加载完成事件imgLoad，并向外发射detailImgLoad
			2. Detail.vue的<DetailGoodsInfo>拿到detailImgLoad，并绑定detailImgLoad方法
			3. <Scroll>添加ref，Detail.vue的methods添加detailImgLoad方法，拿到ref刷新页面
	14. 推荐信息
		1. detail.js中添加getRecommand
		2. Detail.vue中导入getRecommand，created中使用它拿到数据，保存到recommends
		3. Detail.vue中导入GoodsList，并传recommends给它
		4. 由于GoodsListItem同时被Home和Detail使用，GoodsListItem.vue添加computed，<img>动态绑定src
	15. 点击顶部导航栏跳转到对应内容
		1. 获取各个区域的起始y坐标
			1. Detail.vue的data添加themeTopYs，用以保存各个区域起始位置的y坐标
			2. Detail.vue的data添加getThemeTopY，将获取坐标方法保存起来，因为该方法在contentScroll中会用到
			3. 给<DetailCommentInfo>、<DetailParamInfo>、<GoodsList>添加ref
			4. Detail.vue的created中，拿到各起始y坐标存入themeTopYs中并放进debounce生成一个函数，然后将该函数赋给getThemeTopY
			5. Detail.vue的detailImgLoad中调用getThemeTopY，图片加载完后即获取各坐标
		2. 实现点击跳转
			1. DetailNavBar.vue的center插槽下的div绑定点击事件changeCurIdx
			2. DetailNavBar.vue的changeCurIdx中向外发射titleClick和index
			3. Detail.vue的<DetailNavBar>拿到titleClick，并绑定titleClick方法
			4. Detail.vue的methods添加titleClick方法，根据index跳转到对应位置
	16. 滚动内容导航栏显示对应标题：Detail.vue的contentScroll中添加相关语句
	17. 底部工具栏
		1. childComps下建DetailBottomBar.vue，Detail.vue中导入它
		2. DetailBottomBar的cart添加addToCart点击事件，methods添加addToCart方法向外发射
		3. Detail.vue拿到addToCart并绑定addToCart方法，methods中添加addToCart方法
		4. addToCart方法中，新建一个product变量，汇总需要传给购物车的数据
		5. 将需要放进购物车的商品先存进Vuex
			1. index.js的state中添加cartList
			2. store下新建mutation-types.js，将mutations.js中的方法名抽取成常量
			3. mutations.js中添加ADD_TO_CART，当放进购物车的商品是新的种类时，在cartList中添加这种新商品
			4. mutations.js中添加ADD_COUNTER，当放进购物车的商品是旧的种类时，该商品数量加一
			5. Detail.vue中导入mapActions，methods中添加mapActions，以使用mapActions中的addCart方法
	18. 添加商品弹出窗
		1. 封装toast组件（插件方式）
			1. components/common下放toast组件
			2. components/common/toast下建index.js，导入vue，以“插件方式”封装toast组件
			3. main.js中导入toast，并安装



			1. actions.js中将addCart里的内容包在一个Promise里，以通知Detail添加的是新商品还是旧商品
			2. Detail.vue的addToCart中调用addCart后，调用toast显示弹窗

21. 购物车
	1. 导入NavBar
	2. store下建getters.js，封装cartLength和cartList
	3. Cart.vue中导入mapGetters，computed中添加mapGetters，以使用getters.js中封装的内容
	4. 商品列表展示
		1. CartList
			1. Cart.vue中导入CartList
			2. Cart.vue导入Scroll，activated中添加刷新，防止无法滚动的BUG
			3. CartList.vue导入mapGetters，以便使用cartList
			4. CartList.vue导入CartListItem，在其中通过v-for遍历cartList拿到item并通过itemInfo传给CartListItem
		2. CartListItem
			1. CartListItem.vue拿到itemInfo展示数据
			2. 使用CheckButton
				1. CartListItem.vue中导入CheckButton
				2. <CheckButton>中将itemInfo.checked传递给isChecked，绑定点击事件checkClick
				3. CartListItem.vue的methods中添加checkClick方法，点击时往复切换itemInfo.checked的值
	5. 底部工具栏
		1. Cart.vue中导入CartBottomBar、mapGetters，computed中添加mapGetters
		2. CartBottomBar.vue中导入checkButton
		3. 根据商品列表是否全选，决定全选按钮是否被选中
			1. 将isSelectAll传递给isChecked
			2. computed中添加isSelectAll

22. 分类页面
	1. Category.vue导入TopBar
	2. 左边CategoryTab部分
		1. network中添加category.js，分别添加getCategory，Category.vue导入它
		2. Category.vue的created中调用getCategory拿到数据，并存到this.categoryData中
		3. Category.vue中将categoryData传给CategoryTab.vue，v-for展示数据
		4. CategoryTab.vue中，绑定tabClick点击事件，向外emit发生了点击和当前的index
		5. CategoryTab.vue中，绑定动态样式active
		6. Category.vue拿到tabClick将其绑定给tabClick，将currentIndex设为index，
	3. 右边CategoryDetail部分
		1. category.jsg中添加etDetail方法Category.vue导入它
		2. methods中添加getDetailData方法
		3. Category.vue的created中，在拿到categoryData后立即调用getDetailData拿到detailData，做初始化
		4. 将拿到的数据转成computed中的detailData，传给CategoryDetail.vue，v-for展示数据
		5. CategoryDetail.vue的<img>绑定componentImgLoaded加载完成事件，Category.vue拿到后调用categoryImgLoaded
		6. Category.vue的mounted中，将categoryImgLoaded放进防抖
		7. tabClick中，调用getDetailData方法，点击切换tab时加载对应detail数据

22. 用户资料页面

23. 注册页面
	1. 导入NavBar，做返回按钮和中部文字
	2. 添加input，供用户输入信息，添加相应placeholder，v-model绑定data中对应的属性
	3. 获取验证码
		1. childComps下新建GetVerCode.vue，Register.vue中导入它
		2. GetVerCode.vue的methods添加sendCode方法
			
